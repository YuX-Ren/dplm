# @package _global_

# to execute this experiment run:
# python train.py experiment=example

defaults:
  - /datamodule: uniref50
  - /callbacks: lm
  - /trainer: ddp_fp16

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

# name of the run determines folder name in logs
project: "DPLM_300m"
name: "dplm_300m"

datamodule:
  max_tokens: 6000
  max_len: 1022
  mini_run: true

model:
  _target_: dplm
  num_diffusion_timesteps: 500
  gradient_ckpt: false
  rdm_couple: false
  lora:
    lora: false
    lora_rank: 16
    lora_dropout: 0.1
    lora_target_module: (esm.encoder.layer.[0-9]*.attention.(self.query|self.key|self.value|output.dense).*|esm.encoder.layer.[0-9]*.(intermediate|output).dense.*)
    modules_to_save: lm_head,esm.embeddings
  net:
    arch_type: esmc
    name: esmc_300m

task:
  _target_: lm/dplm
  learning:
    noise: random_mask # enable cmlm training with uniform random masking
    watch_t1_t2_loss: false
    cal_constant_loss: false
    weight: linear
  criterion:
    _target_: byprot.modules.cross_entropy.RDMCrossEntropyLoss
    label_smoothing: 0.0
    ignore_index: 1
  optimizer:
    type: adamw
    _partial_: true
    lr: ${train.lr}
    betas: 
      - 0.9
      - 0.98
    weight_decay: 0.01 # 0.0001
  lr_scheduler:
    type: polynomial
    warmup_steps: 2000
    total_steps: ${trainer.max_steps}
    lr: ${train.lr}
    lr_end: 1e-5
    warmup_init_lr: 1e-07
    power: 1

train:
  seed: 42
  lr: 0.00004
  monitor: "val/loss"
  mode: "min"
  patience: 1000

trainer:
  min_epochs: 10
  max_epochs: 10000
  gradient_clip_val: 0.0
  # val_check_interval: 10
  num_sanity_val_steps: 0
  reload_dataloaders_every_n_epochs: 1
  use_distributed_sampler: false
  max_steps: 500_000
  accumulate_grad_batches: 1
  check_val_every_n_epoch: null
  val_check_interval: 10
  enable_progress_bar: true
  num_nodes: 1